// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0
// source: yaticker.proto

package yatickerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Yaticker_QuoteType int32

const (
	Yaticker_NONE           Yaticker_QuoteType = 0
	Yaticker_ALTSYMBOL      Yaticker_QuoteType = 5
	Yaticker_HEARTBEAT      Yaticker_QuoteType = 7
	Yaticker_EQUITY         Yaticker_QuoteType = 8
	Yaticker_INDEX          Yaticker_QuoteType = 9
	Yaticker_MUTUALFUND     Yaticker_QuoteType = 11
	Yaticker_MONEYMARKET    Yaticker_QuoteType = 12
	Yaticker_OPTION         Yaticker_QuoteType = 13
	Yaticker_CURRENCY       Yaticker_QuoteType = 14
	Yaticker_WARRANT        Yaticker_QuoteType = 15
	Yaticker_BOND           Yaticker_QuoteType = 17
	Yaticker_FUTURE         Yaticker_QuoteType = 18
	Yaticker_ETF            Yaticker_QuoteType = 20
	Yaticker_COMMODITY      Yaticker_QuoteType = 23
	Yaticker_ECNQUOTE       Yaticker_QuoteType = 28
	Yaticker_CRYPTOCURRENCY Yaticker_QuoteType = 41
	Yaticker_INDICATOR      Yaticker_QuoteType = 42
	Yaticker_INDUSTRY       Yaticker_QuoteType = 1000
)

// Enum value maps for Yaticker_QuoteType.
var (
	Yaticker_QuoteType_name = map[int32]string{
		0:    "NONE",
		5:    "ALTSYMBOL",
		7:    "HEARTBEAT",
		8:    "EQUITY",
		9:    "INDEX",
		11:   "MUTUALFUND",
		12:   "MONEYMARKET",
		13:   "OPTION",
		14:   "CURRENCY",
		15:   "WARRANT",
		17:   "BOND",
		18:   "FUTURE",
		20:   "ETF",
		23:   "COMMODITY",
		28:   "ECNQUOTE",
		41:   "CRYPTOCURRENCY",
		42:   "INDICATOR",
		1000: "INDUSTRY",
	}
	Yaticker_QuoteType_value = map[string]int32{
		"NONE":           0,
		"ALTSYMBOL":      5,
		"HEARTBEAT":      7,
		"EQUITY":         8,
		"INDEX":          9,
		"MUTUALFUND":     11,
		"MONEYMARKET":    12,
		"OPTION":         13,
		"CURRENCY":       14,
		"WARRANT":        15,
		"BOND":           17,
		"FUTURE":         18,
		"ETF":            20,
		"COMMODITY":      23,
		"ECNQUOTE":       28,
		"CRYPTOCURRENCY": 41,
		"INDICATOR":      42,
		"INDUSTRY":       1000,
	}
)

func (x Yaticker_QuoteType) Enum() *Yaticker_QuoteType {
	p := new(Yaticker_QuoteType)
	*p = x
	return p
}

func (x Yaticker_QuoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yaticker_QuoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_yaticker_proto_enumTypes[0].Descriptor()
}

func (Yaticker_QuoteType) Type() protoreflect.EnumType {
	return &file_yaticker_proto_enumTypes[0]
}

func (x Yaticker_QuoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yaticker_QuoteType.Descriptor instead.
func (Yaticker_QuoteType) EnumDescriptor() ([]byte, []int) {
	return file_yaticker_proto_rawDescGZIP(), []int{0, 0}
}

type Yaticker_OptionType int32

const (
	Yaticker_CALL Yaticker_OptionType = 0
	Yaticker_PUT  Yaticker_OptionType = 1
)

// Enum value maps for Yaticker_OptionType.
var (
	Yaticker_OptionType_name = map[int32]string{
		0: "CALL",
		1: "PUT",
	}
	Yaticker_OptionType_value = map[string]int32{
		"CALL": 0,
		"PUT":  1,
	}
)

func (x Yaticker_OptionType) Enum() *Yaticker_OptionType {
	p := new(Yaticker_OptionType)
	*p = x
	return p
}

func (x Yaticker_OptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yaticker_OptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yaticker_proto_enumTypes[1].Descriptor()
}

func (Yaticker_OptionType) Type() protoreflect.EnumType {
	return &file_yaticker_proto_enumTypes[1]
}

func (x Yaticker_OptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yaticker_OptionType.Descriptor instead.
func (Yaticker_OptionType) EnumDescriptor() ([]byte, []int) {
	return file_yaticker_proto_rawDescGZIP(), []int{0, 1}
}

type Yaticker_MarketHoursType int32

const (
	Yaticker_PRE_MARKET            Yaticker_MarketHoursType = 0
	Yaticker_REGULAR_MARKET        Yaticker_MarketHoursType = 1
	Yaticker_POST_MARKET           Yaticker_MarketHoursType = 2
	Yaticker_EXTENDED_HOURS_MARKET Yaticker_MarketHoursType = 3
)

// Enum value maps for Yaticker_MarketHoursType.
var (
	Yaticker_MarketHoursType_name = map[int32]string{
		0: "PRE_MARKET",
		1: "REGULAR_MARKET",
		2: "POST_MARKET",
		3: "EXTENDED_HOURS_MARKET",
	}
	Yaticker_MarketHoursType_value = map[string]int32{
		"PRE_MARKET":            0,
		"REGULAR_MARKET":        1,
		"POST_MARKET":           2,
		"EXTENDED_HOURS_MARKET": 3,
	}
)

func (x Yaticker_MarketHoursType) Enum() *Yaticker_MarketHoursType {
	p := new(Yaticker_MarketHoursType)
	*p = x
	return p
}

func (x Yaticker_MarketHoursType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yaticker_MarketHoursType) Descriptor() protoreflect.EnumDescriptor {
	return file_yaticker_proto_enumTypes[2].Descriptor()
}

func (Yaticker_MarketHoursType) Type() protoreflect.EnumType {
	return &file_yaticker_proto_enumTypes[2]
}

func (x Yaticker_MarketHoursType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yaticker_MarketHoursType.Descriptor instead.
func (Yaticker_MarketHoursType) EnumDescriptor() ([]byte, []int) {
	return file_yaticker_proto_rawDescGZIP(), []int{0, 2}
}

type Yaticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price             float32                  `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	Time              int64                    `protobuf:"zigzag64,3,opt,name=time,proto3" json:"time,omitempty"`
	Currency          string                   `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Exchange          string                   `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	QuoteType         Yaticker_QuoteType       `protobuf:"varint,6,opt,name=quoteType,proto3,enum=yaticker.Yaticker_QuoteType" json:"quoteType,omitempty"`
	MarketHours       Yaticker_MarketHoursType `protobuf:"varint,7,opt,name=marketHours,proto3,enum=yaticker.Yaticker_MarketHoursType" json:"marketHours,omitempty"`
	ChangePercent     float32                  `protobuf:"fixed32,8,opt,name=changePercent,proto3" json:"changePercent,omitempty"`
	DayVolume         int64                    `protobuf:"zigzag64,9,opt,name=dayVolume,proto3" json:"dayVolume,omitempty"`
	DayHigh           float32                  `protobuf:"fixed32,10,opt,name=dayHigh,proto3" json:"dayHigh,omitempty"`
	DayLow            float32                  `protobuf:"fixed32,11,opt,name=dayLow,proto3" json:"dayLow,omitempty"`
	Change            float32                  `protobuf:"fixed32,12,opt,name=change,proto3" json:"change,omitempty"`
	ShortName         string                   `protobuf:"bytes,13,opt,name=shortName,proto3" json:"shortName,omitempty"`
	ExpireDate        int64                    `protobuf:"zigzag64,14,opt,name=expireDate,proto3" json:"expireDate,omitempty"`
	OpenPrice         float32                  `protobuf:"fixed32,15,opt,name=openPrice,proto3" json:"openPrice,omitempty"`
	PreviousClose     float32                  `protobuf:"fixed32,16,opt,name=previousClose,proto3" json:"previousClose,omitempty"`
	StrikePrice       float32                  `protobuf:"fixed32,17,opt,name=strikePrice,proto3" json:"strikePrice,omitempty"`
	UnderlyingSymbol  string                   `protobuf:"bytes,18,opt,name=underlyingSymbol,proto3" json:"underlyingSymbol,omitempty"`
	OpenInterest      int64                    `protobuf:"zigzag64,19,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	OptionsType       Yaticker_OptionType      `protobuf:"varint,20,opt,name=optionsType,proto3,enum=yaticker.Yaticker_OptionType" json:"optionsType,omitempty"`
	MiniOption        int64                    `protobuf:"zigzag64,21,opt,name=miniOption,proto3" json:"miniOption,omitempty"`
	LastSize          int64                    `protobuf:"zigzag64,22,opt,name=lastSize,proto3" json:"lastSize,omitempty"`
	Bid               float32                  `protobuf:"fixed32,23,opt,name=bid,proto3" json:"bid,omitempty"`
	BidSize           int64                    `protobuf:"zigzag64,24,opt,name=bidSize,proto3" json:"bidSize,omitempty"`
	Ask               float32                  `protobuf:"fixed32,25,opt,name=ask,proto3" json:"ask,omitempty"`
	AskSize           int64                    `protobuf:"zigzag64,26,opt,name=askSize,proto3" json:"askSize,omitempty"`
	PriceHint         int64                    `protobuf:"zigzag64,27,opt,name=priceHint,proto3" json:"priceHint,omitempty"`
	Vol_24Hr          int64                    `protobuf:"zigzag64,28,opt,name=vol_24hr,json=vol24hr,proto3" json:"vol_24hr,omitempty"`
	VolAllCurrencies  int64                    `protobuf:"zigzag64,29,opt,name=volAllCurrencies,proto3" json:"volAllCurrencies,omitempty"`
	Fromcurrency      string                   `protobuf:"bytes,30,opt,name=fromcurrency,proto3" json:"fromcurrency,omitempty"`
	LastMarket        string                   `protobuf:"bytes,31,opt,name=lastMarket,proto3" json:"lastMarket,omitempty"`
	CirculatingSupply float64                  `protobuf:"fixed64,32,opt,name=circulatingSupply,proto3" json:"circulatingSupply,omitempty"`
	Marketcap         float64                  `protobuf:"fixed64,33,opt,name=marketcap,proto3" json:"marketcap,omitempty"`
}

func (x *Yaticker) Reset() {
	*x = Yaticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yaticker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Yaticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Yaticker) ProtoMessage() {}

func (x *Yaticker) ProtoReflect() protoreflect.Message {
	mi := &file_yaticker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Yaticker.ProtoReflect.Descriptor instead.
func (*Yaticker) Descriptor() ([]byte, []int) {
	return file_yaticker_proto_rawDescGZIP(), []int{0}
}

func (x *Yaticker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Yaticker) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Yaticker) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Yaticker) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Yaticker) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Yaticker) GetQuoteType() Yaticker_QuoteType {
	if x != nil {
		return x.QuoteType
	}
	return Yaticker_NONE
}

func (x *Yaticker) GetMarketHours() Yaticker_MarketHoursType {
	if x != nil {
		return x.MarketHours
	}
	return Yaticker_PRE_MARKET
}

func (x *Yaticker) GetChangePercent() float32 {
	if x != nil {
		return x.ChangePercent
	}
	return 0
}

func (x *Yaticker) GetDayVolume() int64 {
	if x != nil {
		return x.DayVolume
	}
	return 0
}

func (x *Yaticker) GetDayHigh() float32 {
	if x != nil {
		return x.DayHigh
	}
	return 0
}

func (x *Yaticker) GetDayLow() float32 {
	if x != nil {
		return x.DayLow
	}
	return 0
}

func (x *Yaticker) GetChange() float32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Yaticker) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Yaticker) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *Yaticker) GetOpenPrice() float32 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *Yaticker) GetPreviousClose() float32 {
	if x != nil {
		return x.PreviousClose
	}
	return 0
}

func (x *Yaticker) GetStrikePrice() float32 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *Yaticker) GetUnderlyingSymbol() string {
	if x != nil {
		return x.UnderlyingSymbol
	}
	return ""
}

func (x *Yaticker) GetOpenInterest() int64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *Yaticker) GetOptionsType() Yaticker_OptionType {
	if x != nil {
		return x.OptionsType
	}
	return Yaticker_CALL
}

func (x *Yaticker) GetMiniOption() int64 {
	if x != nil {
		return x.MiniOption
	}
	return 0
}

func (x *Yaticker) GetLastSize() int64 {
	if x != nil {
		return x.LastSize
	}
	return 0
}

func (x *Yaticker) GetBid() float32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *Yaticker) GetBidSize() int64 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *Yaticker) GetAsk() float32 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *Yaticker) GetAskSize() int64 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *Yaticker) GetPriceHint() int64 {
	if x != nil {
		return x.PriceHint
	}
	return 0
}

func (x *Yaticker) GetVol_24Hr() int64 {
	if x != nil {
		return x.Vol_24Hr
	}
	return 0
}

func (x *Yaticker) GetVolAllCurrencies() int64 {
	if x != nil {
		return x.VolAllCurrencies
	}
	return 0
}

func (x *Yaticker) GetFromcurrency() string {
	if x != nil {
		return x.Fromcurrency
	}
	return ""
}

func (x *Yaticker) GetLastMarket() string {
	if x != nil {
		return x.LastMarket
	}
	return ""
}

func (x *Yaticker) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *Yaticker) GetMarketcap() float64 {
	if x != nil {
		return x.Marketcap
	}
	return 0
}

var File_yaticker_proto protoreflect.FileDescriptor

var file_yaticker_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x79, 0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x79, 0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xd1, 0x0b, 0x0a, 0x08, 0x79,
	0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79,
	0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x64, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x79,
	0x4c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x61, 0x79, 0x4c, 0x6f,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x79, 0x61,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x62,
	0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x5f, 0x32, 0x34, 0x68, 0x72, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x32, 0x34, 0x68, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x76,
	0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x22, 0x80, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x54, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x46, 0x55,
	0x4e, 0x44, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0e, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x4f, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x46, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43,
	0x4e, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x2a, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x10, 0xe8, 0x07, 0x22, 0x1f, 0x0a, 0x0a, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x01, 0x22, 0x61, 0x0a, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x42, 0x0e,
	0x5a, 0x0c, 0x2e, 0x2f, 0x79, 0x61, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yaticker_proto_rawDescOnce sync.Once
	file_yaticker_proto_rawDescData = file_yaticker_proto_rawDesc
)

func file_yaticker_proto_rawDescGZIP() []byte {
	file_yaticker_proto_rawDescOnce.Do(func() {
		file_yaticker_proto_rawDescData = protoimpl.X.CompressGZIP(file_yaticker_proto_rawDescData)
	})
	return file_yaticker_proto_rawDescData
}

var file_yaticker_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yaticker_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_yaticker_proto_goTypes = []interface{}{
	(Yaticker_QuoteType)(0),       // 0: yaticker.yaticker.QuoteType
	(Yaticker_OptionType)(0),      // 1: yaticker.yaticker.OptionType
	(Yaticker_MarketHoursType)(0), // 2: yaticker.yaticker.MarketHoursType
	(*Yaticker)(nil),              // 3: yaticker.yaticker
}
var file_yaticker_proto_depIdxs = []int32{
	0, // 0: yaticker.yaticker.quoteType:type_name -> yaticker.yaticker.QuoteType
	2, // 1: yaticker.yaticker.marketHours:type_name -> yaticker.yaticker.MarketHoursType
	1, // 2: yaticker.yaticker.optionsType:type_name -> yaticker.yaticker.OptionType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_yaticker_proto_init() }
func file_yaticker_proto_init() {
	if File_yaticker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yaticker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Yaticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yaticker_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yaticker_proto_goTypes,
		DependencyIndexes: file_yaticker_proto_depIdxs,
		EnumInfos:         file_yaticker_proto_enumTypes,
		MessageInfos:      file_yaticker_proto_msgTypes,
	}.Build()
	File_yaticker_proto = out.File
	file_yaticker_proto_rawDesc = nil
	file_yaticker_proto_goTypes = nil
	file_yaticker_proto_depIdxs = nil
}
